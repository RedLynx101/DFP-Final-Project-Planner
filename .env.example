# Weekender Pittsburgh Weekend Planner - Environment Configuration
# Team: Purple Turtles â€” Gwen Li, Aadya Agarwal, Emma Peng, Noah Hicks
# Date: 2025-09-13
# Summary: Comprehensive environment configuration for local development and production
# Copy this file to .env and fill in your actual values

# ===== APPLICATION SETTINGS =====
APP_NAME=weekender
ENV=development
DEBUG=true
LOG_LEVEL=INFO
PORT=8000

# ===== CORS CONFIGURATION =====
# For development, include localhost origins
# For production, specify your exact frontend domains (no wildcards in list)
# Replit subdomains (*.replit.dev, *.repl.co) are handled by regex patterns automatically
CORS_ORIGINS=http://localhost:5000,http://127.0.0.1:5000,https://*.replit.dev,https://*.repl.co

# ===== FRONTEND CONFIGURATION =====
# REQUIRED in production - set to your backend API URL
# Development: http://localhost:8000
# Production: https://your-backend-domain.com
VITE_API_BASE_URL=http://localhost:8000

# ===== THIRD-PARTY API KEYS =====
# OpenAI Configuration (required for itinerary planning)
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-4
OPENAI_MAX_COMPLETION_TOKENS=500

# Google Maps API Key (required for location services)
MAPS_API_KEY=your-google-maps-api-key-here
MAPS_PROVIDER=google

# Weather API Key (OpenWeatherMap - required for weather data)
WEATHER_API_KEY=your-weather-api-key-here

# Events APIs (required for event discovery)
EVENTS_API_KEY=your-events-api-key-here
TICKETMASTER_API_KEY=your-ticketmaster-api-key-here

# Yelp API Key (required for restaurant recommendations)
YELP_API_KEY=your-yelp-api-key-here

# ===== DATABASE & CACHE CONFIGURATION =====
# SQLite for development, PostgreSQL for production recommended
DATABASE_URL=sqlite:///./weekender.sqlite3
CACHE_BACKEND=memory

# ===== PRODUCTION DEPLOYMENT CHECKLIST =====
# 1. Set ENV=production for production deployments
# 2. Set DEBUG=false in production
# 3. Replace all API keys with real, secure values
# 4. Configure CORS_ORIGINS with your actual frontend domains
# 5. Set VITE_API_BASE_URL to your backend URL
# 6. Use PostgreSQL for DATABASE_URL in production
# 7. Consider Redis for CACHE_BACKEND in production
# 8. Ensure all required API keys are configured
